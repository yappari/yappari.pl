---
layout: post

author: kbielen
title: C++&#58; formatowanie kodu

dont_list: true
---


h1. Formatowanie kodu

Poniżej zamieszczone są zasady formatowania kodu w naszych projektach C++.


h2. Wcięcia

Wcięcia wykonujemy przy użyciu *4 spacji*.


h2. Odstępy

Wstawiamy odstępy:
* przed nawiasem w instrukcjach przepływu: @for (...)@, -@for(...)@-
* wokół operatorów 2- i 3-argumentowych: @a + b@, @a ? b : c@, -@a+b@-
* po przecinkach i średnikach:
** @printf("%s %d", str, a);@ -@printf("%s %d",str,a);@-
** @for (int i = 0; i < 10; i++)@ -@for (int i = 0;i < 10;i++)@-
* przed klamrą, jeśli zostawiamy ją na końcu linii: @else {@, -@else{@-

Nie wstawiamy odstępów:
* przed nawiasem w wywołaniu i definicji funkcji: @puts(...)@, -@puts (...)@-
* wewnątrz nawiasów: @(a + b)@, -@( a + b )@-
* przed przecinkiem: @a, b@, -@a , b@-
* przy operatorach jednoargumentowych: @*p@, @++i@, @-x@
* przy odwołaniu do tabeli: @table[x]@, -@table [x]@-

Przy deklaracji wskaźników trzymamy gwiazdkę przy indentyfikatorze, a nie przy typie: 
@char *p, q@
-@char* p, q@-


h2. Klamry

Klamrę otwieramy w nowej linii bez wcięcia, i zamykamy w tej samej kolumnie (styl ANSI C++). Dopuszczalny jest też zapis z klamrą otwierającą na końcu linii.
Klamry zaleca się wstawiać nawet dla objęcia pojedynczej linii. 

{% highlight cpp linenos %}
while (...)
{
    ...
}
{% endhighlight %}

{% highlight cpp linenos %}
do
{
    ...
} while (...)
{% endhighlight %}

{% highlight cpp linenos %}
if (...)
{
    ...
}
else if (...)
{
    ...
}
else
{
    ...
}
{% endhighlight %}

Odpuszczamy klamry przy pustych pętlach. Zamiast tego, używamy samotnego wciętego średnika w nowej linii na oznaczenie pustej instrukcji:

{% highlight cpp linenos %}
for (...)
    ;
{% endhighlight %}

h2. Switch

Instrukcję @switch@ formatujemy w następujący sposób:

{% highlight cpp linenos %}
switch (x)
{
    case 0:
        ...
        // przepływa do następnego case

    case 1:
    case 2:
        {
            ...
        }
        break;

    case 3:
        ...
        break;
}
{% endhighlight %}


h2. Definicja funkcji

Definicje funkcji formatujemy w następujący sposób:

{% highlight cpp linenos %}
void functionName(int x, int y)
{
    ...
}
{% endhighlight %}


h2. Klasy

Definicje klas formatujemy w następujący sposób:

{% highlight cpp linenos %}
namespace my_template
{
    template<class T>
    class MyClass : public BaseClass
    {
        public:

            ...

        private:

            ...
    };
}
{% endhighlight %}
