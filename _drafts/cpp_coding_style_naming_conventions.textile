---
layout: post

author: kbielen
title: C++&#58; konwencje tworzenia nazw

dont_list: true
---


h1. Konwencje tworzenia nazw

Poniżej przedstawiamy konwencję tworzenia nazw dla projektów w języku C++.


h2. Style

* @PascalCase@
* @camelCase@
* @lower_case@
* @UPPER_CASE@

h2. Zapis skrótów

Zapis przykładowego pojęcia zawierającego skróty („HTTP SVN Connection”) i składającego się z pojedynczego skrótu („HTML”) w różnych stylach:

* PascalCase:
** @HttpSvnConnection@
** @Html@
* camelCase:
** @httpSvnConnection@
** @html@
* lowerCase:
** @http_svn_connection@
** @html@
* UPPER_CASE:
** @HTTP_SVN_CONNECTION@
** @HTML@

h2. Klasy i typy

Stosujemy następujące zasady:

* używamy rzeczowników lub fraz rzeczonikowych (Customer, OrderItem),
* nie używamy liczby mnogiej w nazewnictwie,
* skrótów używamy oszczędnie,
* nazwy klas zapisujemy w PascalCase,
* nazwy pozostałych typów zapisujemy w lower_case z przyrostkiem '_t' (przykład: @result_t@),
* przy definiowaniu struktur, enumeracji, unii w C++ nie używamy słowa @typedef@, język robi to za nas,
* słowa @typedef@ używamy tylko do definiowania aliasów skomplikowanych zmiennych (przykład: @typedef std::map<int, std::vector<Data>> map_t@),
  dla skrócenia zapisu i na wypadek zmian definicji typu w przyszłości.

Typy enumerowane:

* nazwę enumeracji zapisujemy w PascalCase poprzedzonym literą E: @enum EColor@,
* elementy enumeracji zapisujemy w UPPER_CASE, ewentualnie poprzedzając je nazwą typu: @enum EColor { COLOR_RED, COLOR_BLUE }@.


h2. Nazwy atrybutów

* nazwy atrybutów zapisujemy w stylu camelCase z przedrostkiem @m_@ na początku (np. @m_radius@).


h2. Nazwy funkcji i metod

* nazwy funkcji i metod zapisujemy w stylu camelCase,
* dla metod ustawiających wartość atrybutu używamy prefix'u @set@ (np. @setState(const int state@),
* dla metod pobierających wartość atrybutu nie ustawiamy żadnych prefix'ów (np: @int state()@).


h2. Nazwy zmiennych/parametrów funkcji

* nazwy zmiennych lub parametrów funkcji zapisujemy w stylu camelCase (np. @char *charPtr@)
* nazwy zmiennych globalnych należy poprzedzać przedrostkiem 'g': @g_zmiennaGlobalna@
* nazwy **statycznych** zmiennych globalnych (definiowanych w zakresie pliku przy pomocy słowa kluczowego @static@) należy poprzedzać przedrostkiem 'gs': @gs_statycznaZmiennaGlobalna@


h2. Nazwy stałych

* Używamy stylu UPPER_CASE do definicji stałych (np. @const  char *ERR_MSG = “Oops!”;@),
* nie używamy define'ów do definicji stałych.


h2. Nazwy plików

* pliki z definicjami klas nazywamy tak jak klasy (@ClassName.h@, @ClassName.cpp@ dla klasy @ClassName@),
* nazwy pozostałych plików zapisujemy w stylu lower_case.
